Trabalho em dupla de estrutura de dados
Professor : Ivairton Monteiro Santos
discente 1: João Paulo Alves Campos
discente 2: Vitoria Calonga
data de entrega 10/03/2025
UFMT - 2024/2


O sistema deve atender aos seguintes requisitos:
    1) No contexto com alocação estática, considere uma estrutura de dados que seja capaz de
    armazenar 10.000 registros;
    2) No contexto de alocação dinâmica (com encadeamento), considere dois contextos: 
    (a) lista encadeada; 
    (b) lista com encadeamento duplo;
    3) O sistema deve gerar randomicamente 10.000 dados/valores inteiros (pode ocorrer
    repetição);
        (a) ~1/3 desses registros devem ser inseridos no início da lista;
        (b) ~1/3 desses registros devem ser inseridos no fim da lista;
        (c) ~1/3 desses registros devem ser inseridos em uma posição qualquer, sorteada
    (randômica), da lista;
    4) Para cada processamento de um conjunto de inserção de 10.000 valores, calcule o tempo
    de processamento. Utilize a biblioteca times.h (sys/times.h) do C, para correta medida do
    tempo de utilização do processador;
    5) Execute cada contexto (inserção de 10.000 valores) 10 vezes e calcule o tempo médio de
    execução;
    6) O relatório final deve conter além do código fonte do sistema, um texto explicando o que
    foi feito e como feito (estratégias implementadas na avaliação), apresentando os dados
    obtidos, bem como sua avaliação da estrutura de dados mais eficiente (rápida) no teste;
    7) Considere adicionalmente a análise: É possível avaliar a ocupação da memória para cada
    contexto? Qual método é mais eficiente em relação ao uso de memória? Quanto de
    memória foi utilizada em cada contexto?


Em resumo sobre o que se pede :
    Avaliar o desempenho (tempo de processamento) e o uso de memória de três estruturas de dados:
        Lista estática com capacidade para 10.000 registros.
        Lista dinâmica com encadeamento simples.
        Lista dinâmica duplamente encadeada.
    Comparar os tempos de inserção de dados e a eficiência no uso de memória entre essas estruturas.

    Geração de Dados:
        Gerar aleatoriamente 10.000 valores inteiros (pode haver repetição).
        Dividir as inserções em três partes (~1/3 cada):
            Inserção no início da lista.
            Inserção no fim da lista.
            Inserção em uma posição aleatória da lista.
    Medição de Tempo:
        Usar a biblioteca <times.h> para medir o tempo de processamento (tempo de CPU) de cada operação.
        Para cada estrutura, realizar a inserção dos 10.000 valores e calcular o tempo de processamento.
        Repetir o experimento 10 vezes para cada estrutura e calcular o tempo médio de execução.
    Análise de Memória:
        Avaliar a ocupação de memória para cada estrutura.
        Comparar qual método é mais eficiente em termos de uso de memória.
        Quantificar a memória utilizada em cada contexto.


O relatório final deve incluir:

        Código fonte do sistema implementado.
        Texto explicativo detalhando:
            O que foi feito.
            Como foi feito (estratégias usadas na implementação e avaliação).
            Dados obtidos (resultados dos testes).
            Avaliação sobre qual estrutura foi mais eficiente (mais rápida) no teste.
        Tabela de resultados com as seguintes colunas (para 10 testes com inserção de 10.000 dados):
            Estrutura (estática, dinâmica simples, dinâmica duplamente encadeada).
            Quantidade de inserções no início.
            Quantidade de inserções no fim.
            Quantidade de inserções em posição aleatória.
            Menor tempo de execução.
            Maior tempo de execução.
            Tempo médio de execução.
        Análise adicional sobre uso de memória:
            É possível avaliar a ocupação de memória?
            Qual método é mais eficiente em termos de memória?
            Quanto de memória foi utilizado por cada estrutura?